import random # use in wave 1

peg_colors = ['R', 'Y', 'G', 'B', 'I', 'V']

def generate_code(): # wave1
    return list(random.choices(peg_colors, k = 4))

    
def validate_guess(guess): #wave2
    if len(guess) != 4: #length must be 4
        return False
    for cha in guess: #cha must in 'R', 'Y', 'G', 'B', 'I', 'V'
        if cha.upper() not in peg_colors: # case insensitive
            return False
    return True
    

def color_count(guess, code): #wave3-1
    color_count_num = 0
    code_copy = code.copy() #modify code_copy without change original code
    for cha in guess:# itirate [guess] and [code-copy] to count the same character
        if cha in code_copy:
            code_copy.remove(cha)
            color_count_num += 1
    return color_count_num
    

def correct_pos_and_color(guess, code): #wave3-2
    correct_pos_and_color_num = 0
    for i in range(4):# find the same position and color
        if guess[i] == code[i]:
            correct_pos_and_color_num += 1
    return correct_pos_and_color_num
    

def check_guess(guess, code): #wave3-3
    int1 = correct_pos_and_color(guess, code)
    int2 = color_count(guess, code)- int1
    return int1, int2
    
# check_win_or_lose returns True means win, False means lose, None means ?
def check_win_or_lose(guess, code, num_guesses): # wave2-2
    if num_guesses > 8:
        return False
    elif num_guesses == 8: 
        if guess == code:
          return True
        else:
          return False
    else:
        if guess == code:
          return True
        else:
          return None
    

def get_win_percentage(wins, plays):
    if plays == 0:
        return 0
    else:
        percentage = wins / plays * 100
        return int(percentage) # round down
    

def format_guess_stats(guess_stats):
    stats_list = ["","","","","","","",""] #8 guesses default empty
    for i in guess_stats.keys():
        #i-1 is the index(start at 0) of stats_list, guess_stats[i] access the value 
        #i is the number of kth guess in current round ,which is won. i start at 1. 
        # value means the number of rounds won at the ith guess
        stats_list[i-1] = guess_stats[i] * "X" 
    return stats_list
  
#  mastermind plays the game ...
def mastermind():
    wins = 0
    plays = 0
    guess_stats = { }
    
  
    print("Welcome to Mastermind!")# welcome message
    while True:
        plays += 1 # record number of gamesp
        code = generate_code()#step 1 generate code
        print("""Generating a new code...   
New code generated: ****
Guess the code! Each character in the code is one of the following letters: R, Y, G, B, I, V""") # instruction
        print("""------
Game Loop Output""")
        
        num_guesses = 1
        while num_guesses <= 8:
            guess = list(input("Please enter your four choosen color letters!").upper())# step 2 input guess code
            if not validate_guess(guess): # step 3 valify the guess code : 4 characters in [R, Y, G, B, I, V]
                print('Your entry must only be 4 letters from [R, Y, G, B, I, V], please try again:')
                continue
            
            print(num_guesses, "You guessed:", guess) #step 4 compare code and guess 
            if check_win_or_lose(guess, code, num_guesses) == None:# 1)Not match and guesses less than 8 guesses
                print(check_guess(guess, code))
                num_guesses += 1
                continue

            if check_win_or_lose(guess, code, num_guesses) == True: #2) Match 
                print("Congratulations! You guessed the secret code!")
                wins += 1  # record the number of won 
                if num_guesses not in guess_stats.keys(): #record tthe guesses number
                    guess_stats[num_guesses] = 1
                else:
                    guess_stats[num_guesses] += 1
                break # to statistics
            if check_win_or_lose(guess, code, num_guesses) == False: #3)  Not match and greater or equal to 8 guesses
                    print("You lost ğŸ˜¥ Better luck next time!")
                    break # to statistics
                
        print("STATISTICS")   
        print("Games Played:", plays) 
        print("Win %:", get_win_percentage(wins, plays))
        print("Guess Distribution:")
        for i in range(8): # i from 0 
            print(f"{i+1}|{format_guess_stats(guess_stats)[i]}") 

        again = input("Should we play another round? Enter y to replay, any other character to exit: ") 
        if again.upper() == "Y":
            continue
        else:
            print("See you next time!")
            return

mastermind()
